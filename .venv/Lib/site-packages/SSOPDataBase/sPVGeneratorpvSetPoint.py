from gbaseDB import Column, datetime
from gbaseDB import Integer, DateTime, Float
from gbaseDB import session, engine
from gbaseDB import Base

# Declaration of Measurement Table Table

class servicePVGenerator(Base):
    
    __tablename__ = 'PV Generator'
    
    id = Column(Integer, primary_key=True)

    pV_ID = Column(Integer)
    timestamp = Column(DateTime)
    type = Column(Integer)
    unit = Column(Integer)
    measure_1 = Column(Float)
    measure_2 = Column(Float)
    measure_3 = Column(Float)


    def __repr__(self):
        return "<Service PV Generator(id = %d, Type Of Service = %s)>" % (self.id, self.Type_Of_Service)
    
Base.metadata.create_all(engine)

#returns the list of the measurements data
def listPVGenerator():
    
    return session.query(servicePVGenerator).all()

def listPVGeneratorID(id):
    return session.query(servicePVGenerator).filter(servicePVGenerator.id==id).first()

#Creates a new action (history) of an existent user
def newPVGenerator(data):
    # Verify if the type of the arguments is correct
    try:
        id = data['id']
        pV_ID = data['PV_ID']
        timestamp = data['timestamp']
        type = data['type']
        unit = data['unit']
        measure_1 = data['measure1']
        measure_2 = data['measure2']
        measure_3 = data['measure3']


        serSelfC = servicePVGenerator( id = id, pV_ID = pV_ID, timestamp = timestamp, 
                                      type = type, unit = unit,
                                      measure_1 = measure_1, 
                                      measure_2 = measure_2, measure_3 = measure_3
        )
        
        session.add(serSelfC)
        try:
            session.commit()
        except:
            session.rollback()
            return -4

        return 0

    except:
        exit(-1)

