#%%
# * Implement database that will store every  information
#import library
#import structureServiceArbitrage


from gbaseDB import Base, engine, session
from gbaseDB import Column,String,Integer,  datetime
from sServiceArbitrage import newServiceArbitrage



# Declaration of Measurement Table Table
#%%

class allPayLoads(Base):
    
    __tablename__ = 'All Payloads'
    __table_args__ = {'extend_existing': True} 
    id = Column(Integer, primary_key=True)
    topic = Column(String)
    iotDeviceID = Column(String)
    dataType = Column(String)


    def __repr__(self):
        return "<All Paylodas(id = %d, topic = %s, IoT Device ID = %s, dataType = %s)>" % (self.id, self.topic,
                                                self.iotDeviceID, self.dataType)

Base.metadata.create_all(engine)

#%%
def listData():
    return session.query(allPayLoads).all()


def newPayload(topic, iotDeviceID, dataType):
    
    types = type(iotDeviceID) 

    # Verify if the type of the arguments is correct
    if type(iotDeviceID) is not str:
        if  type(topic) is not str: 
            if type(dataType) is not str:
                return -1
    
    else: 
        newPayload = allPayLoads(topic = topic, iotDeviceID = iotDeviceID, dataType = dataType )
        session.add(newPayload)
        try:
            session.commit()
        except:
            session.rollback()
            return -4

        return 0

##%%
#date = datetime.now().isoformat()
#
#data = {
#    'id' : 10000, 
#    'Type_Of_Service' : "date",
#    'Type_Of_Activation' : date,
#    'Price' : date,
#    'Price_Min' : date,
#    'Price_Max' : date,
#}
#
#newServiceArbitrage(data)
# %%
